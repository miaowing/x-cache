{"version":3,"sources":["xcache.js"],"names":["global","factory","exports","module","define","amd","this","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","possibleConstructorReturn","self","call","ReferenceError","XCache","limit","arguments","undefined","size","head","tail","_keymap","Map","returnEntry","callback","fromHead","LruXCache","_XCache","getPrototypeOf","entry","newer","older","delete","get","set","shift","array","push","FifoXCache","remove","LfuXCache","currentEntry","_remove","count","_sort","strategy","option"],"mappings":"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","file":"xcache.min.js","sourcesContent":["/*!\n * X-cache v0.0.1\n * (c) 2016 Elwin-赵小峰\n * Released under the MIT License.\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (factory());\n}(this, function () { 'use strict';\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var inherits = function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  var possibleConstructorReturn = function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n\n  /**\n   * Created by zhaofeng on 7/5/16.\n   *\n   */\n\n  var XCache = function () {\n      function XCache() {\n          var limit = arguments.length <= 0 || arguments[0] === undefined ? 1000 : arguments[0];\n          classCallCheck(this, XCache);\n\n          this.size = 0;\n          this.limit = limit;\n          this.head = this.tail = undefined;\n          this._keymap = new Map();\n      }\n\n      createClass(XCache, [{\n          key: \"shift\",\n          value: function shift() {}\n      }, {\n          key: \"put\",\n          value: function put(key, value) {}\n      }, {\n          key: \"get\",\n          value: function get(key, returnEntry) {}\n      }, {\n          key: \"find\",\n          value: function find(key) {}\n      }, {\n          key: \"remove\",\n          value: function remove(key) {}\n      }, {\n          key: \"removeAll\",\n          value: function removeAll() {}\n      }, {\n          key: \"forEach\",\n          value: function forEach(callback, fromHead) {}\n      }, {\n          key: \"getArray\",\n          value: function getArray(fromHead) {}\n      }, {\n          key: \"getSize\",\n          value: function getSize() {\n              return this.size;\n          }\n      }]);\n      return XCache;\n  }();\n\n  var LruXCache = function (_XCache) {\n      inherits(LruXCache, _XCache);\n\n      function LruXCache() {\n          var limit = arguments.length <= 0 || arguments[0] === undefined ? 1000 : arguments[0];\n          classCallCheck(this, LruXCache);\n          return possibleConstructorReturn(this, Object.getPrototypeOf(LruXCache).call(this, limit));\n      }\n\n      createClass(LruXCache, [{\n          key: 'shift',\n          value: function shift() {\n              var entry = this.head;\n\n              if (entry) {\n                  if (this.head.newer) {\n                      this.head = this.head.newer;\n                      this.head.older = undefined;\n                  } else {\n                      this.head = undefined;\n                  }\n\n                  entry.newer = entry.older = undefined;\n                  this._keymap.delete(entry.key);\n                  this.size--;\n              }\n\n              return entry;\n          }\n      }, {\n          key: 'put',\n          value: function put(key, value) {\n              var entry = this.get(key, true);\n\n              if (entry === undefined) {\n                  entry = { key: key, value: value };\n\n                  this._keymap.set(key, entry);\n\n                  if (this.size == this.limit) {\n                      this.shift();\n                  }\n\n                  if (this.tail) {\n                      this.tail.newer = entry;\n                      entry.older = this.tail;\n                  } else {\n                      this.head = entry;\n                  }\n\n                  this.tail = entry;\n                  this.size++;\n              } else {\n                  entry.value = value;\n              }\n\n              return entry;\n          }\n      }, {\n          key: 'get',\n          value: function get(key) {\n              var returnEntry = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n              var entry = this._keymap.get(key);\n              if (entry === undefined) return;\n              if (entry === this.tail) {\n                  return returnEntry ? entry : entry.value;\n              }\n\n              if (entry.newer) {\n                  if (entry.head) {\n                      this.head = entry.newer;\n                  }\n                  entry.newer.older = entry.older;\n              }\n\n              if (entry.older) {\n                  entry.older.newer = entry.newer;\n              }\n\n              entry.newer = undefined;\n              entry.older = this.tail;\n\n              if (this.tail) {\n                  this.tail.newer = entry;\n              }\n              this.tail = entry;\n\n              return returnEntry ? entry : entry.value;\n          }\n      }, {\n          key: 'find',\n          value: function find(key) {\n              return !!this._keymap.get(key);\n          }\n      }, {\n          key: 'remove',\n          value: function remove(key) {\n              var entry = this._keymap.get(key);\n\n              if (entry !== undefined) {\n                  delete this._keymap[entry.key];\n                  this.size--;\n\n                  if (entry.newer && entry.older) {\n                      entry.older.newer = entry.newer;\n                      entry.newer.older = entry.older;\n                  } else if (entry.newer) {\n                      entry.newer.older = undefined;\n                      this.head = entry.newer;\n                  } else if (entry.older) {\n                      entry.older.newer = undefined;\n                      this.tail = entry.older;\n                  } else {\n                      this.head = this.tail = undefined;\n                  }\n\n                  return true;\n              }\n\n              return false;\n          }\n      }, {\n          key: 'removeAll',\n          value: function removeAll() {\n              this.head = this.tail = undefined;\n              this.size = 0;\n              this._keymap = new Map();\n          }\n      }, {\n          key: 'forEach',\n          value: function forEach(callback) {\n              var fromHead = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n              var entry = fromHead ? this.head : this.tail;\n              while (entry) {\n                  callback(entry.key, entry.value, entry);\n                  entry = fromHead ? entry.newer : entry.older;\n              }\n          }\n      }, {\n          key: 'getArray',\n          value: function getArray() {\n              var fromHead = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n              var array = [],\n                  entry = fromHead ? this.head : this.tail;\n              while (entry) {\n                  array.push({\n                      key: entry.key,\n                      value: entry.value\n                  });\n                  entry = fromHead ? entry.newer : entry.older;\n              }\n\n              return array;\n          }\n      }]);\n      return LruXCache;\n  }(XCache);\n\n  var FifoXCache = function (_XCache) {\n      inherits(FifoXCache, _XCache);\n\n      function FifoXCache() {\n          var limit = arguments.length <= 0 || arguments[0] === undefined ? 1000 : arguments[0];\n          classCallCheck(this, FifoXCache);\n          return possibleConstructorReturn(this, Object.getPrototypeOf(FifoXCache).call(this, limit));\n      }\n\n      createClass(FifoXCache, [{\n          key: 'shift',\n          value: function shift() {\n              var entry = this.head;\n\n              if (entry) {\n                  if (this.head.newer) {\n                      this.head = this.head.newer;\n                      this.head.older = undefined;\n                  } else {\n                      this.head = undefined;\n                  }\n\n                  entry.newer = entry.older = undefined;\n                  this._keymap.delete(entry.key);\n                  this.size--;\n              }\n\n              return entry;\n          }\n      }, {\n          key: 'put',\n          value: function put(key, value) {\n              var entry = this.get(key, true);\n\n              if (entry !== undefined) {\n                  this.remove(key);\n              }\n\n              entry = { key: key, value: value };\n\n              this._keymap.set(key, entry);\n\n              if (this.size == this.limit) {\n                  this.shift();\n              }\n\n              if (this.tail) {\n                  this.tail.newer = entry;\n                  entry.older = this.tail;\n              } else {\n                  this.head = entry;\n              }\n\n              this.tail = entry;\n              this.size++;\n\n              return entry;\n          }\n      }, {\n          key: 'get',\n          value: function get(key) {\n              var returnEntry = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n              return returnEntry ? this._keymap.get(key) : (this._keymap.get(key) || {}).value;\n          }\n      }, {\n          key: 'find',\n          value: function find(key) {\n              return !!this._keymap.get(key);\n          }\n      }, {\n          key: 'remove',\n          value: function remove(key) {\n              var entry = this._keymap.get(key);\n              if (entry !== undefined) {\n                  delete this._keymap[entry.key];\n                  this.size--;\n\n                  if (entry.newer && entry.older) {\n                      entry.older.newer = entry.newer;\n                      entry.newer.older = entry.older;\n                  } else if (entry.newer) {\n                      entry.newer.older = undefined;\n                      this.head = entry.newer;\n                  } else if (entry.older) {\n                      entry.older.newer = undefined;\n                      this.tail = entry.older;\n                  } else {\n                      this.head = this.tail = undefined;\n                  }\n\n                  return true;\n              }\n\n              return false;\n          }\n      }, {\n          key: 'removeAll',\n          value: function removeAll() {\n              this.head = this.tail = undefined;\n              this.size = 0;\n              this._keymap = new Map();\n          }\n      }, {\n          key: 'forEach',\n          value: function forEach(callback) {\n              var fromHead = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n              var entry = fromHead ? this.head : this.tail;\n              while (entry) {\n                  callback(entry.key, entry.value, entry);\n                  entry = fromHead ? entry.newer : entry.older;\n              }\n          }\n      }, {\n          key: 'getArray',\n          value: function getArray() {\n              var fromHead = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n              var array = [],\n                  entry = fromHead ? this.head : this.tail;\n              while (entry) {\n                  array.push({\n                      key: entry.key,\n                      value: entry.value\n                  });\n                  entry = fromHead ? entry.newer : entry.older;\n              }\n\n              return array;\n          }\n      }]);\n      return FifoXCache;\n  }(XCache);\n\n  var LfuXCache = function (_XCache) {\n      inherits(LfuXCache, _XCache);\n\n      function LfuXCache() {\n          var limit = arguments.length <= 0 || arguments[0] === undefined ? 1000 : arguments[0];\n          classCallCheck(this, LfuXCache);\n          return possibleConstructorReturn(this, Object.getPrototypeOf(LfuXCache).call(this, limit));\n      }\n\n      createClass(LfuXCache, [{\n          key: '_remove',\n          value: function _remove(currentEntry) {\n              if (currentEntry.newer && currentEntry.older) {\n                  currentEntry.older.newer = currentEntry.newer;\n                  currentEntry.newer.older = currentEntry.older;\n              } else if (currentEntry.newer) {\n                  this.head = currentEntry.newer;\n                  currentEntry.newer.older = undefined;\n              } else if (currentEntry.older) {\n                  this.tail = currentEntry.older;\n                  currentEntry.older.newer = undefined;\n              }\n\n              currentEntry.newer = undefined;\n              currentEntry.older = undefined;\n\n              return currentEntry;\n          }\n      }, {\n          key: '_sort',\n          value: function _sort(currentEntry) {\n              var entry = currentEntry.newer;\n              entry && this._remove(currentEntry);\n\n              while (entry) {\n                  if (currentEntry.count < entry.count) {\n                      currentEntry.older = entry.older;\n                      currentEntry.newer = entry;\n                      entry.older.newer = currentEntry;\n                      entry.older = currentEntry;\n                      break;\n                  }\n\n                  if (entry === this.tail) {\n                      currentEntry.older = this.tail;\n                      this.tail.newer = currentEntry;\n                      this.tail = currentEntry;\n                      break;\n                  }\n\n                  entry = entry.newer;\n              }\n          }\n      }, {\n          key: 'shift',\n          value: function shift() {\n              var entry = this.head;\n\n              if (entry) {\n                  if (this.head.newer) {\n                      this.head = this.head.newer;\n                      this.head.older = undefined;\n                  } else {\n                      this.head = undefined;\n                  }\n\n                  entry.newer = entry.older = undefined;\n                  this._keymap.delete(entry.key);\n                  this.size--;\n              }\n\n              return entry;\n          }\n      }, {\n          key: 'put',\n          value: function put(key, value) {\n              var entry = this.get(key, true);\n\n              if (entry === undefined) {\n                  entry = { key: key, value: value, count: 0 };\n\n                  this._keymap.set(key, entry);\n\n                  if (this.size == this.limit) {\n                      this.shift();\n                  }\n\n                  if (this.head === undefined) {\n                      this.head = this.tail = entry;\n                  } else {\n                      entry.newer = this.head;\n                      this.head.older = entry;\n                      this.head = entry;\n                  }\n                  this.size++;\n              } else {\n                  this.size--;\n                  entry.value = value;\n              }\n\n              return entry;\n          }\n      }, {\n          key: 'get',\n          value: function get(key) {\n              var returnEntry = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n              var entry = this._keymap.get(key);\n              if (entry === undefined) return;\n\n              entry.count++;\n              this._sort(entry);\n\n              return returnEntry ? entry : entry.value;\n          }\n      }, {\n          key: 'find',\n          value: function find(key) {\n              return !!this._keymap.get(key);\n          }\n      }, {\n          key: 'remove',\n          value: function remove(key) {\n              var entry = this._keymap.get(key);\n\n              if (entry !== undefined) {\n                  delete this._keymap[entry.key];\n                  this.size--;\n\n                  if (entry.newer && entry.older) {\n                      entry.older.newer = entry.newer;\n                      entry.newer.older = entry.older;\n                  } else if (entry.newer) {\n                      entry.newer.older = undefined;\n                      this.head = entry.newer;\n                  } else if (entry.older) {\n                      entry.older.newer = undefined;\n                      this.tail = entry.older;\n                  } else {\n                      this.head = this.tail = undefined;\n                  }\n\n                  return true;\n              }\n\n              return false;\n          }\n      }, {\n          key: 'removeAll',\n          value: function removeAll() {\n              this.head = this.tail = undefined;\n              this.size = 0;\n              this._keymap = new Map();\n          }\n      }, {\n          key: 'forEach',\n          value: function forEach(callback) {\n              var fromHead = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n              var entry = fromHead ? this.head : this.tail;\n              while (entry) {\n                  callback(entry.key, entry.value, entry);\n                  entry = fromHead ? entry.newer : entry.older;\n              }\n          }\n      }, {\n          key: 'getArray',\n          value: function getArray() {\n              var fromHead = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\n              var array = [],\n                  entry = fromHead ? this.head : this.tail;\n              while (entry) {\n                  array.push({\n                      key: entry.key,\n                      value: entry.value\n                  });\n                  entry = fromHead ? entry.newer : entry.older;\n              }\n\n              return array;\n          }\n      }]);\n      return LfuXCache;\n  }(XCache);\n\n  exports.LruXCache = LruXCache;\n\n  exports.FifoXCache = FifoXCache;\n\n  exports.LfuXCache = LfuXCache;\n\n  exports.XCache = function (strategy, option) {\n      strategy = strategy || 'lru';\n      option = option || {};\n\n      switch (strategy) {\n          case 'lru':\n              return new LruXCache(option.limit);\n              break;\n          case 'fifo':\n              return new FifoXCache(option.limit);\n              break;\n      }\n  };\n\n}));"]}